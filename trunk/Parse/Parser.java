
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 19 01:14:16 CST 2011
//----------------------------------------------------

package Parse;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 19 01:14:16 CST 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\006\000\002\002\004\000" +
    "\002\002\005\000\002\002\005\000\002\002\006\000\002" +
    "\002\010\000\002\002\006\000\002\002\010\000\002\002" +
    "\006\000\002\002\012\000\002\002\003\000\002\002\006" +
    "\000\002\002\007\000\002\003\003\000\002\003\005\000" +
    "\002\004\003\000\002\004\005\000\002\005\005\000\002" +
    "\005\007\000\002\006\003\000\002\006\005\000\002\006" +
    "\006\000\002\006\006\000\002\007\003\000\002\007\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\006\000\002\014\003\000\002\014\004\000\002" +
    "\014\005\000\002\014\005\000\002\015\005\000\002\015" +
    "\007\000\002\012\006\000\002\012\010\000\002\013\010" +
    "\000\002\013\011\000\002\013\012\000\002\013\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\030\012\010\017\004\022\007\033\016\035" +
    "\012\037\006\044\020\051\015\055\005\056\011\057\013" +
    "\001\002\000\030\012\010\017\004\022\007\033\016\035" +
    "\012\037\006\044\020\051\015\055\005\056\011\057\013" +
    "\001\002\000\070\002\uffff\004\uffff\005\uffff\006\uffff\010" +
    "\uffff\011\uffff\013\uffff\014\uffff\015\uffff\017\uffff\021\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\034" +
    "\uffff\036\uffff\041\uffff\042\uffff\043\uffff\045\uffff\046\uffff" +
    "\050\uffff\052\uffff\053\uffff\001\002\000\030\012\010\017" +
    "\004\022\007\033\016\035\012\037\006\044\020\051\015" +
    "\055\005\056\011\057\013\001\002\000\004\057\212\001" +
    "\002\000\070\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\021\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\034\ufffe" +
    "\036\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe\050" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\070\002\000\004\000" +
    "\005\000\006\000\010\000\011\000\013\000\014\000\015" +
    "\000\017\000\021\000\023\000\024\000\025\000\026\000" +
    "\027\000\030\000\034\000\036\000\041\000\042\000\043" +
    "\000\045\000\046\000\050\000\052\000\053\000\001\002" +
    "\000\030\012\010\017\004\022\007\033\016\035\012\037" +
    "\006\044\020\051\015\055\005\056\011\057\013\001\002" +
    "\000\102\002\uffda\004\uffda\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\015\uffda\017\uffda\021\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\160\034\uffda\036\uffda\040\157\041\uffda\042\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\156\050\uffda\052\uffda\053" +
    "\uffda\001\002\000\034\002\155\005\035\006\027\011\040" +
    "\014\030\015\037\017\025\024\036\026\034\042\031\045" +
    "\026\046\032\053\033\001\002\000\010\004\073\021\074" +
    "\043\066\001\002\000\032\012\010\017\004\022\007\033" +
    "\016\034\061\035\012\037\006\044\020\051\015\055\005" +
    "\056\011\057\013\001\002\000\076\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\017\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\023\032\022\034\ufffd\036\ufffd\040\021" +
    "\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\050\ufffd\052" +
    "\ufffd\053\ufffd\001\002\000\070\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\034\uffe3\036\uffe3\041\uffe3\042\uffe3\043\uffe3\045" +
    "\uffe3\046\uffe3\050\uffe3\052\uffe3\053\uffe3\001\002\000\030" +
    "\012\010\017\004\022\007\033\016\035\012\037\006\044" +
    "\020\051\015\055\005\056\011\057\013\001\002\000\004" +
    "\057\055\001\002\000\030\012\010\017\004\022\007\033" +
    "\016\035\012\037\006\044\020\051\015\055\005\056\011" +
    "\057\013\001\002\000\070\002\uffef\004\uffef\005\035\006" +
    "\027\010\uffef\011\040\013\uffef\014\030\015\037\017\025" +
    "\021\uffef\023\uffef\024\036\025\uffef\026\034\027\uffef\030" +
    "\uffef\034\uffef\036\uffef\041\uffef\042\031\043\uffef\045\026" +
    "\046\032\050\uffef\052\uffef\053\033\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\070\002" +
    "\ufff0\004\ufff0\005\035\006\027\010\ufff0\011\ufff0\013\ufff0" +
    "\014\030\015\037\017\025\021\ufff0\023\ufff0\024\036\025" +
    "\ufff0\026\034\027\ufff0\030\ufff0\034\ufff0\036\ufff0\041\ufff0" +
    "\042\031\043\ufff0\045\026\046\032\050\ufff0\052\ufff0\053" +
    "\033\001\002\000\054\002\ufff5\004\ufff5\006\027\010\ufff5" +
    "\011\ufff5\013\ufff5\017\025\021\ufff5\023\ufff5\024\036\025" +
    "\ufff5\027\ufff5\030\ufff5\034\ufff5\036\ufff5\041\ufff5\043\ufff5" +
    "\045\ufff5\046\032\050\ufff5\052\ufff5\001\002\000\070\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\017\ufff9\021\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\034\ufff9\036\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\045\ufff9\046\ufff9\050\ufff9\052\ufff9\053" +
    "\ufff9\001\002\000\054\002\ufff4\004\ufff4\006\027\010\ufff4" +
    "\011\ufff4\013\ufff4\017\025\021\ufff4\023\ufff4\024\036\025" +
    "\ufff4\027\ufff4\030\ufff4\034\ufff4\036\ufff4\041\ufff4\043\ufff4" +
    "\045\ufff4\046\032\050\ufff4\052\ufff4\001\002\000\054\002" +
    "\ufff3\004\ufff3\006\027\010\ufff3\011\ufff3\013\ufff3\017\025" +
    "\021\ufff3\023\ufff3\024\036\025\ufff3\027\ufff3\030\ufff3\034" +
    "\ufff3\036\ufff3\041\ufff3\043\ufff3\045\ufff3\046\032\050\ufff3" +
    "\052\ufff3\001\002\000\054\002\ufff7\004\ufff7\006\027\010" +
    "\ufff7\011\ufff7\013\ufff7\017\025\021\ufff7\023\ufff7\024\036" +
    "\025\ufff7\027\ufff7\030\ufff7\034\ufff7\036\ufff7\041\ufff7\043" +
    "\ufff7\045\ufff7\046\032\050\ufff7\052\ufff7\001\002\000\070" +
    "\002\ufffb\004\ufffb\005\ufffb\006\027\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\021\ufffb\023\ufffb\024\036" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\034\ufffb\036\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\052\ufffb" +
    "\053\ufffb\001\002\000\054\002\ufff6\004\ufff6\006\027\010" +
    "\ufff6\011\ufff6\013\ufff6\017\025\021\ufff6\023\ufff6\024\036" +
    "\025\ufff6\027\ufff6\030\ufff6\034\ufff6\036\ufff6\041\ufff6\043" +
    "\ufff6\045\ufff6\046\032\050\ufff6\052\ufff6\001\002\000\054" +
    "\002\ufff2\004\ufff2\006\027\010\ufff2\011\ufff2\013\ufff2\017" +
    "\025\021\ufff2\023\ufff2\024\036\025\ufff2\027\ufff2\030\ufff2" +
    "\034\ufff2\036\ufff2\041\ufff2\043\ufff2\045\ufff2\046\032\050" +
    "\ufff2\052\ufff2\001\002\000\070\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\017" +
    "\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\034\ufff8\036\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\052\ufff8\053\ufff8\001\002\000\070" +
    "\002\ufff1\004\ufff1\005\035\006\027\010\ufff1\011\ufff1\013" +
    "\ufff1\014\030\015\037\017\025\021\ufff1\023\ufff1\024\036" +
    "\025\ufff1\026\034\027\ufff1\030\ufff1\034\ufff1\036\ufff1\041" +
    "\ufff1\042\031\043\ufff1\045\ufff1\046\032\050\ufff1\052\ufff1" +
    "\053\033\001\002\000\070\002\ufffa\004\ufffa\005\ufffa\006" +
    "\027\010\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa" +
    "\021\ufffa\023\ufffa\024\036\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\034\ufffa\036\ufffa\041\ufffa\042\ufffa\043\ufffa\045\ufffa" +
    "\046\ufffa\050\ufffa\052\ufffa\053\ufffa\001\002\000\076\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\021\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045\uffd9\046" +
    "\uffd9\050\uffd9\052\uffd9\053\uffd9\001\002\000\034\005\035" +
    "\006\027\011\040\014\030\015\037\017\025\024\036\026" +
    "\034\041\057\042\031\045\026\046\032\053\033\001\002" +
    "\000\076\002\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\021\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\050\uffd8\052\uffd8\053\uffd8\001\002\000" +
    "\006\034\063\036\064\001\002\000\070\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\010\uffec\011\uffec\013\uffec\014\uffec\015" +
    "\uffec\017\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\034\uffec\036\uffec\041\uffec\042\uffec\043" +
    "\uffec\045\uffec\046\uffec\050\uffec\052\uffec\053\uffec\001\002" +
    "\000\040\005\035\006\027\011\040\014\030\015\037\017" +
    "\025\024\036\026\034\030\uffe0\034\uffe0\036\uffe0\042\031" +
    "\045\026\046\032\053\033\001\002\000\070\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\034\uffeb\036\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\050\uffeb\052\uffeb\053\uffeb\001" +
    "\002\000\030\012\010\017\004\022\007\033\016\035\012" +
    "\037\006\044\020\051\015\055\005\056\011\057\013\001" +
    "\002\000\040\005\035\006\027\011\040\014\030\015\037" +
    "\017\025\024\036\026\034\030\uffdf\034\uffdf\036\uffdf\042" +
    "\031\045\026\046\032\053\033\001\002\000\004\057\146" +
    "\001\002\000\012\004\uffd4\021\uffd4\027\uffd4\043\uffd4\001" +
    "\002\000\012\004\uffd2\021\uffd2\027\uffd2\043\uffd2\001\002" +
    "\000\012\004\uffd3\021\uffd3\027\uffd3\043\uffd3\001\002\000" +
    "\012\004\073\021\074\027\141\043\066\001\002\000\004" +
    "\057\120\001\002\000\004\057\076\001\002\000\012\004" +
    "\uffd6\021\uffd6\027\uffd6\043\uffd6\001\002\000\004\053\077" +
    "\001\002\000\010\020\103\047\101\057\100\001\002\000" +
    "\012\004\uffd0\021\uffd0\027\uffd0\043\uffd0\001\002\000\006" +
    "\050\110\057\106\001\002\000\012\004\uffd1\021\uffd1\027" +
    "\uffd1\043\uffd1\001\002\000\004\016\104\001\002\000\004" +
    "\057\105\001\002\000\012\004\uffcd\021\uffcd\027\uffcd\043" +
    "\uffcd\001\002\000\004\007\116\001\002\000\006\025\111" +
    "\050\112\001\002\000\012\004\uffcf\021\uffcf\027\uffcf\043" +
    "\uffcf\001\002\000\004\057\113\001\002\000\012\004\uffce" +
    "\021\uffce\027\uffce\043\uffce\001\002\000\004\007\114\001" +
    "\002\000\004\057\115\001\002\000\010\025\uffcb\034\uffcb" +
    "\050\uffcb\001\002\000\004\057\117\001\002\000\010\025" +
    "\uffcc\034\uffcc\050\uffcc\001\002\000\004\033\121\001\002" +
    "\000\006\034\123\057\106\001\002\000\006\025\111\034" +
    "\132\001\002\000\006\007\125\053\124\001\002\000\030" +
    "\012\010\017\004\022\007\033\016\035\012\037\006\044" +
    "\020\051\015\055\005\056\011\057\013\001\002\000\004" +
    "\057\126\001\002\000\004\053\127\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\042\004" +
    "\uffc6\005\035\006\027\011\040\014\030\015\037\017\025" +
    "\021\uffc6\024\036\026\034\027\uffc6\042\031\043\uffc6\045" +
    "\026\046\032\053\033\001\002\000\042\004\uffc8\005\035" +
    "\006\027\011\040\014\030\015\037\017\025\021\uffc8\024" +
    "\036\026\034\027\uffc8\042\031\043\uffc8\045\026\046\032" +
    "\053\033\001\002\000\006\007\134\053\133\001\002\000" +
    "\030\012\010\017\004\022\007\033\016\035\012\037\006" +
    "\044\020\051\015\055\005\056\011\057\013\001\002\000" +
    "\004\057\135\001\002\000\004\053\136\001\002\000\030" +
    "\012\010\017\004\022\007\033\016\035\012\037\006\044" +
    "\020\051\015\055\005\056\011\057\013\001\002\000\042" +
    "\004\uffc5\005\035\006\027\011\040\014\030\015\037\017" +
    "\025\021\uffc5\024\036\026\034\027\uffc5\042\031\043\uffc5" +
    "\045\026\046\032\053\033\001\002\000\042\004\uffc7\005" +
    "\035\006\027\011\040\014\030\015\037\017\025\021\uffc7" +
    "\024\036\026\034\027\uffc7\042\031\043\uffc7\045\026\046" +
    "\032\053\033\001\002\000\032\012\010\017\004\022\007" +
    "\030\144\033\016\035\012\037\006\044\020\051\015\055" +
    "\005\056\011\057\013\001\002\000\012\004\uffd5\021\uffd5" +
    "\027\uffd5\043\uffd5\001\002\000\006\030\145\036\064\001" +
    "\002\000\070\002\uffe2\004\uffe2\005\uffe2\006\uffe2\010\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\021\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\034\uffe2" +
    "\036\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\050" +
    "\uffe2\052\uffe2\053\uffe2\001\002\000\070\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\017\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\034\uffe1\036\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\045\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\001\002" +
    "\000\006\007\147\031\150\001\002\000\004\057\152\001" +
    "\002\000\030\012\010\017\004\022\007\033\016\035\012" +
    "\037\006\044\020\051\015\055\005\056\011\057\013\001" +
    "\002\000\042\004\uffca\005\035\006\027\011\040\014\030" +
    "\015\037\017\025\021\uffca\024\036\026\034\027\uffca\042" +
    "\031\043\uffca\045\026\046\032\053\033\001\002\000\004" +
    "\031\153\001\002\000\030\012\010\017\004\022\007\033" +
    "\016\035\012\037\006\044\020\051\015\055\005\056\011" +
    "\057\013\001\002\000\042\004\uffc9\005\035\006\027\011" +
    "\040\014\030\015\037\017\025\021\uffc9\024\036\026\034" +
    "\027\uffc9\042\031\043\uffc9\045\026\046\032\053\033\001" +
    "\002\000\004\002\001\001\002\000\006\050\174\057\173" +
    "\001\002\000\030\012\010\017\004\022\007\033\016\035" +
    "\012\037\006\044\020\051\015\055\005\056\011\057\013" +
    "\001\002\000\032\012\010\017\004\022\007\033\016\034" +
    "\162\035\012\037\006\044\020\051\015\055\005\056\011" +
    "\057\013\001\002\000\006\025\164\034\165\001\002\000" +
    "\070\002\uffee\004\uffee\005\uffee\006\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\017\uffee\021\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\034\uffee\036\uffee" +
    "\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\050\uffee\052" +
    "\uffee\053\uffee\001\002\000\036\005\035\006\027\011\040" +
    "\014\030\015\037\017\025\024\036\025\uffde\026\034\034" +
    "\uffde\042\031\045\026\046\032\053\033\001\002\000\030" +
    "\012\010\017\004\022\007\033\016\035\012\037\006\044" +
    "\020\051\015\055\005\056\011\057\013\001\002\000\070" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\010\uffed\011\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\021\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\034\uffed\036\uffed\041" +
    "\uffed\042\uffed\043\uffed\045\uffed\046\uffed\050\uffed\052\uffed" +
    "\053\uffed\001\002\000\036\005\035\006\027\011\040\014" +
    "\030\015\037\017\025\024\036\025\uffdd\026\034\034\uffdd" +
    "\042\031\045\026\046\032\053\033\001\002\000\034\005" +
    "\035\006\027\011\040\014\030\015\037\017\025\024\036" +
    "\026\034\041\170\042\031\045\026\046\032\053\033\001" +
    "\002\000\100\002\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\171\017\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\050\uffd7\052\uffd7\053\uffd7" +
    "\001\002\000\030\012\010\017\004\022\007\033\016\035" +
    "\012\037\006\044\020\051\015\055\005\056\011\057\013" +
    "\001\002\000\070\002\uffe8\004\uffe8\005\035\006\027\010" +
    "\uffe8\011\040\013\uffe8\014\030\015\037\017\025\021\uffe8" +
    "\023\uffe8\024\036\025\uffe8\026\034\027\uffe8\030\uffe8\034" +
    "\uffe8\036\uffe8\041\uffe8\042\031\043\uffe8\045\026\046\032" +
    "\050\uffe8\052\uffe8\053\033\001\002\000\004\053\203\001" +
    "\002\000\070\002\uffea\004\uffea\005\uffea\006\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\015\uffea\017\uffea\021\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\034\uffea" +
    "\036\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea\050" +
    "\uffea\052\uffea\053\uffea\001\002\000\006\025\176\050\177" +
    "\001\002\000\004\057\200\001\002\000\070\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\034\uffe9\036\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\050\uffe9\052\uffe9\053\uffe9\001" +
    "\002\000\004\053\201\001\002\000\030\012\010\017\004" +
    "\022\007\033\016\035\012\037\006\044\020\051\015\055" +
    "\005\056\011\057\013\001\002\000\036\005\035\006\027" +
    "\011\040\014\030\015\037\017\025\024\036\025\uffdb\026" +
    "\034\042\031\045\026\046\032\050\uffdb\053\033\001\002" +
    "\000\030\012\010\017\004\022\007\033\016\035\012\037" +
    "\006\044\020\051\015\055\005\056\011\057\013\001\002" +
    "\000\036\005\035\006\027\011\040\014\030\015\037\017" +
    "\025\024\036\025\uffdc\026\034\042\031\045\026\046\032" +
    "\050\uffdc\053\033\001\002\000\034\005\035\006\027\011" +
    "\040\014\030\015\037\017\025\024\036\026\034\042\031" +
    "\045\026\046\032\052\206\053\033\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\070\002" +
    "\uffe7\004\uffe7\005\035\006\027\010\210\011\040\013\uffe7" +
    "\014\030\015\037\017\025\021\uffe7\023\uffe7\024\036\025" +
    "\uffe7\026\034\027\uffe7\030\uffe7\034\uffe7\036\uffe7\041\uffe7" +
    "\042\031\043\uffe7\045\026\046\032\050\uffe7\052\uffe7\053" +
    "\033\001\002\000\030\012\010\017\004\022\007\033\016" +
    "\035\012\037\006\044\020\051\015\055\005\056\011\057" +
    "\013\001\002\000\070\002\uffe6\004\uffe6\005\035\006\027" +
    "\010\uffe6\011\040\013\uffe6\014\030\015\037\017\025\021" +
    "\uffe6\023\uffe6\024\036\025\uffe6\026\034\027\uffe6\030\uffe6" +
    "\034\uffe6\036\uffe6\041\uffe6\042\031\043\uffe6\045\026\046" +
    "\032\050\uffe6\052\uffe6\053\033\001\002\000\004\031\213" +
    "\001\002\000\030\012\010\017\004\022\007\033\016\035" +
    "\012\037\006\044\020\051\015\055\005\056\011\057\013" +
    "\001\002\000\034\005\035\006\027\011\040\014\030\015" +
    "\037\017\025\023\215\024\036\026\034\042\031\045\026" +
    "\046\032\053\033\001\002\000\030\012\010\017\004\022" +
    "\007\033\016\035\012\037\006\044\020\051\015\055\005" +
    "\056\011\057\013\001\002\000\034\005\035\006\027\011" +
    "\040\013\217\014\030\015\037\017\025\024\036\026\034" +
    "\042\031\045\026\046\032\053\033\001\002\000\030\012" +
    "\010\017\004\022\007\033\016\035\012\037\006\044\020" +
    "\051\015\055\005\056\011\057\013\001\002\000\070\002" +
    "\uffe4\004\uffe4\005\035\006\027\010\uffe4\011\040\013\uffe4" +
    "\014\030\015\037\017\025\021\uffe4\023\uffe4\024\036\025" +
    "\uffe4\026\034\027\uffe4\030\uffe4\034\uffe4\036\uffe4\041\uffe4" +
    "\042\031\043\uffe4\045\026\046\032\050\uffe4\052\uffe4\053" +
    "\033\001\002\000\034\005\035\006\027\011\040\013\222" +
    "\014\030\015\037\017\025\024\036\026\034\042\031\045" +
    "\026\046\032\053\033\001\002\000\030\012\010\017\004" +
    "\022\007\033\016\035\012\037\006\044\020\051\015\055" +
    "\005\056\011\057\013\001\002\000\070\002\uffe5\004\uffe5" +
    "\005\035\006\027\010\uffe5\011\040\013\uffe5\014\030\015" +
    "\037\017\025\021\uffe5\023\uffe5\024\036\025\uffe5\026\034" +
    "\027\uffe5\030\uffe5\034\uffe5\036\uffe5\041\uffe5\042\031\043" +
    "\uffe5\045\026\046\032\050\uffe5\052\uffe5\053\033\001\002" +
    "\000\070\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\021\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\034\ufffc\036" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc\050\ufffc" +
    "\052\ufffc\053\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\013\006\016\001\001\000\006\002" +
    "\223\006\016\001\001\000\002\001\001\000\006\002\220" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\204\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\071\010\074\011" +
    "\066\012\070\013\067\001\001\000\010\002\061\003\057" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\055\006\016\001\001\000\002\001\001\000\006" +
    "\002\023\006\016\001\001\000\002\001\001\000\006\002" +
    "\053\006\016\001\001\000\006\002\052\006\016\001\001" +
    "\000\006\002\051\006\016\001\001\000\006\002\050\006" +
    "\016\001\001\000\006\002\047\006\016\001\001\000\006" +
    "\002\046\006\016\001\001\000\006\002\045\006\016\001" +
    "\001\000\006\002\044\006\016\001\001\000\006\002\043" +
    "\006\016\001\001\000\006\002\042\006\016\001\001\000" +
    "\006\002\041\006\016\001\001\000\006\002\040\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\064\006\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\141\011\066\012\070\013\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\101\001\001\000\002\001" +
    "\001\000\004\015\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\130\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\127\006\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\137\006\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\136\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\061\003\142\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\150\006\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\153\006\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\174\001\001" +
    "\000\006\002\166\006\016\001\001\000\010\002\162\004" +
    "\160\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\165\006\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\171\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\201\006\016\001\001\000\002\001\001\000\006" +
    "\002\203\006\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\206\006\016\001\001\000\002\001\001" +
    "\000\006\002\210\006\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\213\006\016\001\001\000\002" +
    "\001\001\000\006\002\215\006\016\001\001\000\002\001" +
    "\001\000\006\002\217\006\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\222\006\016\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functiondeclaration ::= FUNCTION ID LPAREN typefields RPAREN COLON ID EQ expr 
            {
              Absyn.Dec RESULT =null;
		int function0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int function0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object function0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fieldlist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fieldlist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Absyn.FieldList fieldlist0 = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(function0left,
							 Symbol.Symbol.symbol(id1),fieldlist0,
							 new Absyn.NameTy(id2left,Symbol.Symbol.symbol(id2)),
							 exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // functiondeclaration ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expr 
            {
              Absyn.Dec RESULT =null;
		int function0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int function0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object function0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(function0left,
							 Symbol.Symbol.symbol(id1),null,
							 new Absyn.NameTy(id2left,Symbol.Symbol.symbol(id2)),
							 exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // functiondeclaration ::= FUNCTION ID LPAREN typefields RPAREN EQ expr 
            {
              Absyn.Dec RESULT =null;
		int function0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int function0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object function0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fieldlist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fieldlist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Absyn.FieldList fieldlist0 = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(function0left,
							 Symbol.Symbol.symbol(id0),fieldlist0,null,exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // functiondeclaration ::= FUNCTION ID LPAREN RPAREN EQ expr 
            {
              Absyn.Dec RESULT =null;
		int function0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int function0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object function0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(function0left,
							 Symbol.Symbol.symbol(id0),null,null,exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variabledeclaration ::= VAR ID COLON ID ASSIGN expr 
            {
              Absyn.Dec RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assign0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assign0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object assign0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.VarDec(assign0left,
						   			Symbol.Symbol.symbol(id1),
									new Absyn.NameTy(id2left,Symbol.Symbol.symbol(id2)),
									exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variabledeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variabledeclaration ::= VAR ID ASSIGN expr 
            {
              Absyn.Dec RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assign0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assign0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object assign0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.VarDec(assign0left,
						  		   Symbol.Symbol.symbol(id0),null,exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variabledeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typefields ::= typefields COMMA ID COLON ID 
            {
              Absyn.FieldList RESULT =null;
		int fieldlist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fieldlist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Absyn.FieldList fieldlist0 = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colon0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colon0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object colon0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fieldlist0.append(new Absyn.FieldList(colon0left,
				   Symbol.Symbol.symbol(id1),
				   Symbol.Symbol.symbol(id2),null));
		RESULT = fieldlist0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typefields",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typefields ::= ID COLON ID 
            {
              Absyn.FieldList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colon0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colon0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object colon0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FieldList(colon0left,
				   Symbol.Symbol.symbol(id1),
				   Symbol.Symbol.symbol(id2),null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typefields",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT =null;
		int array0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int array0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object array0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.ArrayTy(array0left,Symbol.Symbol.symbol(id0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= LBRACE typefields RBRACE 
            {
              Absyn.Ty RESULT =null;
		int lbrace0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbrace0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lbrace0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fieldlist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fieldlist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.FieldList fieldlist0 = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.RecordTy(lbrace0left,fieldlist0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= LBRACE RBRACE 
            {
              Absyn.Ty RESULT =null;
		int lbrace0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lbrace0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lbrace0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.RecordTy(lbrace0left,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= ID 
            {
              Absyn.Ty RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.NameTy(id0left,Symbol.Symbol.symbol(id0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // typedeclaration ::= TYPE ID EQ type 
            {
              Absyn.Dec RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eq0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eq0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eq0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int type0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Ty type0 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.TypeDec(eq0left,
					   			Symbol.Symbol.symbol(id0),type0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= functiondeclaration 
            {
              Absyn.Dec RESULT =null;
		int dec0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Dec dec0 = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dec0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= variabledeclaration 
            {
              Absyn.Dec RESULT =null;
		int dec0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Dec dec0 = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dec0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= typedeclaration 
            {
              Absyn.Dec RESULT =null;
		int dec0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Dec dec0 = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dec0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarationlist ::= declarationlist declaration 
            {
              Absyn.DecList RESULT =null;
		int declist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.DecList declist0 = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dec0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Dec dec0 = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 declist0.append(dec0);RESULT = declist0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarationlist ::= declaration 
            {
              Absyn.DecList RESULT =null;
		int dec0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dec0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Dec dec0 = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.DecList(dec0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= ID LBRACK expr RBRACK 
            {
              Absyn.Var RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(id0left,
						new Absyn.SimpleVar(id0left,Symbol.Symbol.symbol(id0)),
						exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Absyn.Var RESULT =null;
		int var0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Absyn.Var var0 = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(var0.pos,var0,exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lvalue ::= lvalue DOT ID 
            {
              Absyn.Var RESULT =null;
		int var0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Var var0 = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dot0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dot0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dot0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FieldVar(dot0left,var0,Symbol.Symbol.symbol(id0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lvalue ::= ID 
            {
              Absyn.Var RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.SimpleVar(id0left,Symbol.Symbol.symbol(id0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fieldlist ::= fieldlist COMMA ID EQ expr 
            {
              Absyn.FieldExpList RESULT =null;
		int fieldexplist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fieldexplist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Absyn.FieldExpList fieldexplist0 = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eq0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eq0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eq0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fieldexplist0.append(new Absyn.FieldExpList(eq0left,
				   			Symbol.Symbol.symbol(id0),
				   			exp0,null));
				 RESULT = fieldexplist0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fieldlist ::= ID EQ expr 
            {
              Absyn.FieldExpList RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eq0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eq0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eq0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.FieldExpList(eq0left,
				   			Symbol.Symbol.symbol(id0),
				   			exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprlist ::= exprlist COMMA expr 
            {
              Absyn.ExpList RESULT =null;
		int explist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int explist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.ExpList explist0 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 explist0.append(exp0);RESULT = explist0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprlist ::= expr 
            {
              Absyn.ExpList RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.ExpList(exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprseq ::= exprseq SEMICOLON expr 
            {
              Absyn.ExpList RESULT =null;
		int explist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int explist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.ExpList explist0 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 explist0.append(exp0);RESULT = explist0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprseq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprseq ::= expr 
            {
              Absyn.ExpList RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.ExpList(exp0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprseq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= LET declarationlist IN exprseq END 
            {
              Absyn.Exp RESULT =null;
		int let0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int let0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object let0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int declist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Absyn.DecList declist0 = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int in0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int in0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object in0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int explist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int explist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.ExpList explist0 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.LetExp(let0left,declist0,new Absyn.SeqExp(in0left, explist0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LET declarationlist IN END 
            {
              Absyn.Exp RESULT =null;
		int let0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int let0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object let0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int declist0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declist0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.DecList declist0 = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Absyn.LetExp(let0left,declist0,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= BREAK 
            {
              Absyn.Exp RESULT =null;
		int break0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int break0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object break0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.BreakExp(break0left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Absyn.Exp RESULT =null;
		int for0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int for0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object for0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int assign0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int assign0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object assign0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.ForExp(for0left,
	   			  	  new Absyn.VarDec(assign0left, Symbol.Symbol.symbol(id0),null,exp1),
					  exp2,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= WHILE expr DO expr 
            {
              Absyn.Exp RESULT =null;
		int while0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int while0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object while0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.WhileExp(while0left,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF expr THEN expr ELSE expr 
            {
              Absyn.Exp RESULT =null;
		int if0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int if0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object if0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.IfExp(if0left,exp1,exp2,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IF expr THEN expr 
            {
              Absyn.Exp RESULT =null;
		int if0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int if0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object if0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.IfExp(if0left,exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ID LBRACK expr RBRACK OF expr 
            {
              Absyn.Exp RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.ArrayExp(id0left,Symbol.Symbol.symbol(id0),exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ID LBRACE fieldlist RBRACE 
            {
              Absyn.Exp RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int list0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.FieldExpList list0 = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.RecordExp(id0left,Symbol.Symbol.symbol(id0),list0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= ID LBRACE RBRACE 
            {
              Absyn.Exp RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Absyn.RecordExp(id0left,Symbol.Symbol.symbol(id0),null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LPAREN exprseq RPAREN 
            {
              Absyn.Exp RESULT =null;
		int paren0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paren0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object paren0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.ExpList list0 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.SeqExp(paren0left,list0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LPAREN RPAREN 
            {
              Absyn.Exp RESULT =null;
		int paren0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paren0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object paren0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.SeqExp(paren0left,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ID LPAREN exprlist RPAREN 
            {
              Absyn.Exp RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int args0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int args0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.ExpList args0 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Absyn.CallExp(id0left,Symbol.Symbol.symbol(id0),args0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= ID LPAREN RPAREN 
            {
              Absyn.Exp RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Absyn.CallExp(id0left,Symbol.Symbol.symbol(id0),null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= lvalue ASSIGN expr 
            {
              Absyn.Exp RESULT =null;
		int var0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Var var0 = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.AssignExp(op0left,var0,exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr OR expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.IfExp(op0left,exp1,new Absyn.IntExp(op0left,1),exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AND expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.IfExp(op0left,exp1,exp2,new Absyn.IntExp(op0left,0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GE expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.GE,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr LE expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.LE,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr GT expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.GT,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr LT expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.LT,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr NEQ expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.NE,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EQ expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.EQ,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DIVIDE expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.DIV,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr TIMES expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.MUL,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left, exp1, Absyn.OpExp.MINUS, exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Absyn.Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Absyn.Exp exp1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,exp1,Absyn.OpExp.PLUS,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= MINUS expr 
            {
              Absyn.Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Exp exp0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.OpExp(op0left,new Absyn.IntExp(op0left,0),Absyn.OpExp.MINUS,exp0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= lvalue 
            {
              Absyn.Exp RESULT =null;
		int var0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Absyn.Var var0 = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.VarExp(var0.pos,var0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NIL 
            {
              Absyn.Exp RESULT =null;
		int nil0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nil0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nil0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.NilExp(nil0left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= INT 
            {
              Absyn.Exp RESULT =null;
		int num0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num0 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.IntExp(num0left,num0.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= STRING 
            {
              Absyn.Exp RESULT =null;
		int str0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int str0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Absyn.StringExp(str0left,str0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

